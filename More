function exp(power, base){
    let res = 1;
    for(let i = 0; i<power; i++){
        res *= base;
    }
    return res;
}
function m(matr, b){
    let l = matr.length;
    let res = [];
    let cols = [];
    let rows = [];
    let nr = 0;
    let nc = 0;
    let g = 0;
   for(let i = 0; i<l; i++){
       g = 0;
       for(let k = 0; k<b.length; k++){
           if(i==b[k][0]){
               g++;
           }else{
               g += 0;
           }
       }
       if(g==0){
           rows[nr] = i;
           nr++;
       }else{
           let z = 0;
       }
   }
    for(let i = 0; i<l; i++){
       g = 0;
       for(let k = 0; k<b.length; k++){
           if(i==b[k][1]){
               g++;
           }else{
               g += 0;
           }
       }
       if(g==0){
           cols[nc] = i;
           nc++;
       }else{
           let z = 0;
       }
   }
    for(let i = 0; i<nc; i++){
        res[i] = [];
        for(let j = 0; j<nc; j++){
            res[i][j] = matr[rows[i]][cols[j]];
        }
    }
    return res;
}
function randomArray(n){
a = [];
str = "";
for(let i = 0; i<n; i++){
    a[i] = [];
    for(let j = 0; j<n; j++){
        a[i][j] = Math.round((Math.random()*25))*exp((Math.round((Math.random()*25))), -1);
    }
}
    for(let i = 0; i<n; i++){
        for(let j = 0; j<n; j++){
            str = `${str}     ${a[i][j]}`;
        }
        str = `${str}\n`;
    }
    return a;
}
function subm(col, matr){
    let l = matr.length;
    let allrow = [];
    for(let i = 0; i<l-1; i++){
        allrow[i] = [];
        for(let j = 0; j<l; j++){
            allrow[i][j] = matr[i+1][j];
        }
    }
    let all = [];
    for(let i = 0; i<l-1; i++){
        all[i] = [];
        for(let j = 0; j<col; j++){
            all[i][j] = allrow[i][j];
        }
    }
    for(let i = 0; i<l-1; i++){
        for(let j = 1+col; j<l; j++){
            all[i][j-1] = allrow[i][j];
        }
    }
    return all;
}


function wer(mat){
    let l = mat.length;
    let res = "{";
    for(let i = 0; i<l-1; i++){
        res += `{${String(mat[i])}}, `;
    }
    res += `{${String(mat[l-1])}}}`;
    return res;
}
function wradet(mat){
    return `det ${wer(mat)}`;
}
function wramul(mat){
    return `${wer(mat)}*${wer(invMat(mat))}`;
}
function det(matrix){
    let l = matrix.length;
    if(l==1){
        return matrix[0][0];
    }else{
let sum = 0;
for(let i = 0; i<l; i++){
    sum += matrix[0][i]*exp(1+i, -1)*det(subm(i, matrix))
}
    return sum;
    
    }

    
}
function all(n){
    let b = randomArray(n);
console.log(wer(b));
console.log(det(b));
}
function invMat(matrix){
    let res = [];
    
    for(let i = 0; i<matrix.length; i++){
        res[i] = [];
        for(let j = 0; j<matrix.length; j++){
            let b = [];
            b[0] = [];
            b[0][0] = i;
            b[0][1] = j;
            res[i][j] = det(m(matrix, b));
        }
    }
    let restwo = [];
    for(let i = 0; i<matrix.length; i++){
        restwo[i] = [];
        for(let j = 0; j<matrix.length; j++){
            restwo[i][j] = (1/det(matrix))*res[j][i]*(exp((i+j), -1));
        }
    }
    return restwo;
}
function mult(a, b){
    let res = [];
    let l = a.length;
    let g = 0;
    for(let i = 0; i<l; i++){
        res[i] = [];
for(let j = 0; j<l; j++){
    g = 0;
    for(let k = 0; k<l; k++){
        g += a[i][k]*b[k][j];
    }
    res[i][j] = g;
}
    }
    return res;
}
